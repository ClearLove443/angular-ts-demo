import { Pipe, SecurityContext } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
/**
 * nl2br pipe
 *
 * @export
 * @class Nl2BrPipe
 * @implements {PipeTransform}
 */
var Nl2BrPipe = /** @class */ (function () {
    function Nl2BrPipe(sanitizer) {
        this.sanitizer = sanitizer;
    }
    /**
     * new line to <br> pipe
     *
     * @param {string} value
     * @param {boolean} [sanitizeBeforehand=false]
     * @returns {string}
     * @memberof Nl2BrPipe
     */
    Nl2BrPipe.prototype.transform = function (value, sanitizeBeforehand) {
        if (sanitizeBeforehand === void 0) { sanitizeBeforehand = false; }
        if (typeof value !== 'string') {
            return value;
        }
        var result;
        var textParsed = value.replace(/(?:\r\n|\r|\n|\\n|\\r|\\r\\n)/g, '<br />');
        // [Checkmarx] Angular_Usage_of_Unsafe_DOM_Sanitizer
        // if (!VERSION || VERSION.major === '2') {
        //   result = this.sanitizer.bypassSecurityTrustHtml(textParsed);
        // } else if
        if (sanitizeBeforehand) {
            result = this.sanitizer.sanitize(SecurityContext.HTML, textParsed);
        }
        else {
            result = textParsed;
        }
        return result;
    };
    Nl2BrPipe.ɵfac = function Nl2BrPipe_Factory(t) { return new (t || Nl2BrPipe)(i0.ɵɵdirectiveInject(i1.DomSanitizer)); };
    Nl2BrPipe.ɵpipe = i0.ɵɵdefinePipe({ name: "nl2br", type: Nl2BrPipe, pure: true });
    return Nl2BrPipe;
}());
export { Nl2BrPipe };
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(Nl2BrPipe, [{
        type: Pipe,
        args: [{
                name: 'nl2br'
            }]
    }], function () { return [{ type: i1.DomSanitizer }]; }, null); })();
//# sourceMappingURL=nl2br.pipe.js.map