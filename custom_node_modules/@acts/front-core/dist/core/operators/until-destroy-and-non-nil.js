import { distinctUntilChanged } from 'rxjs/operators';
import { filterNil } from '@datorama/akita';
import { untilDestroyed } from '@ngneat/until-destroy';
/**
 * nonNilUntilDestroy
 *
 * @param {*} componentInstance
 * @param {string} [destroyMethodName]
 */
export var nonNilUntilDestroy = function (componentInstance, destroyMethodName) { return function (source) {
    return source.pipe(filterNil, untilDestroyed(componentInstance, destroyMethodName));
}; };
/**
 * changedUntilDestroy
 *
 * @param {*} componentInstance
 * @param {*} [changeConditions=undefined]
 * @param {string} [destroyMethodName]
 */
export var changedUntilDestroy = function (componentInstance, changeConditions, destroyMethodName) {
    if (changeConditions === void 0) { changeConditions = undefined; }
    return function (source) {
        return source.pipe(distinctUntilChanged(changeConditions), untilDestroyed(componentInstance, destroyMethodName));
    };
};
/**
 * nonNilChangedUntilDestroy
 *
 * @param {*} componentInstance
 * @param {*} [changeConditions=undefined]
 * @param {string} [destroyMethodName]
 */
export var nonNilChangedUntilDestroy = function (componentInstance, changeConditions, destroyMethodName) {
    if (changeConditions === void 0) { changeConditions = undefined; }
    return function (source) {
        return source.pipe(filterNil, distinctUntilChanged(changeConditions), untilDestroyed(componentInstance, destroyMethodName));
    };
};
//# sourceMappingURL=until-destroy-and-non-nil.js.map