var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { Injectable } from '@angular/core';
import { AngularFireAuth } from '@angular/fire/auth';
import { AngularFirestore } from '@angular/fire/firestore';
import { CoreStore } from './core.store';
import * as i0 from "@angular/core";
import * as i1 from "@angular/fire/firestore";
import * as i2 from "@angular/fire/auth";
import * as i3 from "./core.store";
/**
 * Core Service
 *
 * @export
 * @class CoreService
 */
var CoreFirebaseService = /** @class */ (function () {
    /**
     * Creates an instance of CoreService.
     * @param {AngularFirestore} afs
     * @param {CoreStore} coreStore
     * @memberof CoreService
     */
    function CoreFirebaseService(afs, afa, coreStore) {
        this.afs = afs;
        this.afa = afa;
        this.coreStore = coreStore;
    }
    /**
     *initializeFirebase
     *
     * @memberof CoreService
     */
    CoreFirebaseService.prototype.initializeFirebase = function () {
        var _this = this;
        this.afa.authState.subscribe(function (user) {
            if (user) {
                _this.config = _this.afs.collection('system').doc('config');
                _this.version = _this.afs.collection('system').doc('version');
                _this.maintenance = _this.afs.collection('system').doc('maintenance');
                _this.fetch();
            }
        });
        this.afaLogin();
    };
    /**
     * firebase login
     *
     * @public
     * @memberof CoreService
     */
    CoreFirebaseService.prototype.afaLogin = function () {
        var _this = this;
        this.afa.signInAnonymously().catch(function (error) {
            if (error) {
                setTimeout(function () {
                    _this.afaLogin();
                }, 1000);
            }
        });
    };
    /**
     * subscribe Config from firebase
     *
     * @private
     * @memberof CoreService
     */
    CoreFirebaseService.prototype.fetch = function () {
        var _this = this;
        this.config.valueChanges().subscribe(function (config) {
            _this.coreStore.update(function (state) { return ({
                core: __assign(__assign({}, state.core), { system: __assign(__assign({}, state.core.system), { config: config }) })
            }); });
        });
        this.version.valueChanges().subscribe(function (version) {
            _this.coreStore.update(function (state) { return ({
                core: __assign(__assign({}, state.core), { system: __assign(__assign({}, state.core.system), { version: version }) })
            }); });
        });
        this.maintenance
            .valueChanges()
            .subscribe(function (maintenance) {
            _this.coreStore.update(function (state) { return ({
                core: __assign(__assign({}, state.core), { system: __assign(__assign({}, state.core.system), { maintenance: maintenance }) })
            }); });
        });
    };
    /**
     * subscribe UserConfig from firebase
     *
     * @param {string} userId
     * @memberof CoreService
     */
    CoreFirebaseService.prototype.subscribeUserConfig = function (userId) {
        var _this = this;
        this.userConfig = this.afs
            .collection('userConfig')
            .doc(userId)
            .collection('config');
        this.userConfig.valueChanges().subscribe(function (userConfig) {
            _this.coreStore.update(function (state) { return ({
                core: __assign(__assign({}, state.core), { userConfig: userConfig })
            }); });
        });
    };
    CoreFirebaseService.ɵfac = function CoreFirebaseService_Factory(t) { return new (t || CoreFirebaseService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.AngularFireAuth), i0.ɵɵinject(i3.CoreStore)); };
    CoreFirebaseService.ɵprov = i0.ɵɵdefineInjectable({ token: CoreFirebaseService, factory: CoreFirebaseService.ɵfac });
    return CoreFirebaseService;
}());
export { CoreFirebaseService };
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(CoreFirebaseService, [{
        type: Injectable
    }], function () { return [{ type: i1.AngularFirestore }, { type: i2.AngularFireAuth }, { type: i3.CoreStore }]; }, null); })();
//# sourceMappingURL=core-firebase.service.js.map