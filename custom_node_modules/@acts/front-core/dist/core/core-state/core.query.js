var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Injectable } from '@angular/core';
import { QueryEntity } from '@datorama/akita';
import { CoreStore } from './core.store';
import * as i0 from "@angular/core";
import * as i1 from "./core.store";
/**
 * CoreQuery
 *
 * @export
 * @class CoreQuery
 * @extends {QueryEntity<CoreState, Core>}
 */
var CoreQuery = /** @class */ (function (_super) {
    __extends(CoreQuery, _super);
    function CoreQuery(store) {
        var _this = _super.call(this, store) || this;
        _this.store = store;
        _this.loading$ = _this.select(function (core) { return !!core.core.loading; });
        _this.loadingType$ = _this.select(function (core) { return core.core.loadingType; });
        _this.theme$ = _this.select(function (core) { return core.core.theme; });
        _this.version$ = _this.select(function (core) { return core.core.system.version; });
        _this.maintenance$ = _this.select(function (core) { return core.core.system.maintenance; });
        _this.config$ = _this.select(function (core) { return core.core.system.config; });
        _this.userConfig$ = _this.select(function (core) { return core.core.userConfig; });
        return _this;
    }
    /**
     * Pick theme
     *
     * @memberof CoreQuery
     */
    CoreQuery.prototype.getTheme = function () {
        return this.getValue().core.theme ? this.getValue().core.theme : undefined;
    };
    /**
     * Pick loading type
     *
     * @memberof CoreQuery
     */
    CoreQuery.prototype.getLoadingType = function () {
        return this.getValue().core.loadingType
            ? this.getValue().core.loadingType
            : undefined;
    };
    CoreQuery.ɵfac = function CoreQuery_Factory(t) { return new (t || CoreQuery)(i0.ɵɵinject(i1.CoreStore)); };
    CoreQuery.ɵprov = i0.ɵɵdefineInjectable({ token: CoreQuery, factory: CoreQuery.ɵfac, providedIn: 'root' });
    return CoreQuery;
}(QueryEntity));
export { CoreQuery };
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(CoreQuery, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: i1.CoreStore }]; }, null); })();
//# sourceMappingURL=core.query.js.map