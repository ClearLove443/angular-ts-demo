/**
 * Define the ILogger interaface
 */
import { ILogMessage } from './logger.service';
/**
 * Interface for logger
 */
export interface ILogger {
    /**
     * Write a log message.
     *
     * @param {Date} datetime date and time for log
     * @param {string} level log level
     * @param {ILogMessage} log log message
     * @memberof ILogger
     */
    write(datetime: Date, level: string, log: ILogMessage): void;
}
/**
 * Define basic logger
 */
export declare abstract class AbstractLogger implements ILogger {
    /**
     * Index of Levels for Log level
     *
     * @type {number}
     * @memberof AbstractLogger
     */
    logLevel: number;
    /**
     * Gets the log level
     *
     * @private
     * @param {string} level string of log level
     * @returns {number} index of Levels for log level based
     * @memberof AbstractLogger
     */
    private getLogLevel;
    /**
     * Check the log level for can output or not.
     *
     * @protected
     * @param {string} level log level
     * @returns {boolean} true if log level is valid; otherwise, false.
     * @memberof AbstractLogger
     */
    protected isValid(level: string): boolean;
    /**
     * Creates an instance of AbstractLogger.
     * @param {string} level log level
     * @memberof AbstractLogger
     */
    constructor(level: string);
    /**
     * Write a log message.
     *
     * @abstract
     * @param {Date} datetime date and time for log
     * @param {string} level log level
     * @param {ILogMessage} log log message
     * @memberof AbstractLogger
     */
    abstract write(datetime: Date, level: string, log: ILogMessage): void;
}
