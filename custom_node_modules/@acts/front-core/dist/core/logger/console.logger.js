var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { format } from 'date-fns';
import { AbstractLogger } from './logger';
/**
 * Console logger
 */
var ConsoleLogger = /** @class */ (function (_super) {
    __extends(ConsoleLogger, _super);
    /**
     * Creates an instance of ConsoleLogger.
     * @param {IConsoleLoggerConfig} config Configuration for concole logger
     * @memberof ConsoleLogger
     */
    function ConsoleLogger(config) {
        return _super.call(this, config.level) || this;
    }
    /**
     * Write a log message.
     *
     * @param {Date} datetime date and time for log
     * @param {string} level log level
     * @param {ILogMessage} log log message
     * @returns {void} Nohting
     * @memberof ConsoleLogger
     */
    ConsoleLogger.prototype.write = function (datetime, level, log) {
        // if no message or the log level is less than the environ
        if (!this.isValid(level)) {
            return;
        }
        var color;
        switch (level) {
            case 'EVENT':
            case 'TAP_EVENT':
                return;
            case 'TRACE':
                color = 'blue';
                break;
            case 'DEBUG':
                color = 'teal';
                break;
            case 'INFO':
            case 'LOG':
                color = 'gray';
                break;
            case 'WARN':
            case 'ERROR':
            case 'SYSTEM_ERROR':
                color = 'red';
                break;
            case 'OFF':
            default:
                return;
        }
        if (!log.stack) {
            log.stack = '';
        }
        // tslint:disable-next-line:no-console
        console.log("%c" + format(datetime, 'yyyy-MM-dd HH:mm:ss.SSS') + " [" + level + "] " + log.message + log.param + " " + log.stack, "color:" + color);
    };
    return ConsoleLogger;
}(AbstractLogger));
export { ConsoleLogger };
//# sourceMappingURL=console.logger.js.map