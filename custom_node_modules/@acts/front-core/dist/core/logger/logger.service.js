var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/**
 * This is logger service.
 */
import * as StackTrace from 'stacktrace-js';
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Logging Level
 */
export var Levels = [
    'TRACE',
    'DEBUG',
    'INFO',
    'LOG',
    'EVENT',
    'TAP_EVENT',
    'WARN',
    'ERROR',
    'SYSTEM_ERROR',
    'OFF'
];
/**
 * Logger service
 */
var LoggerService = /** @class */ (function () {
    /**
     * Creates an instance of LoggerService.
     * @memberof LoggerService
     */
    function LoggerService() {
        LoggerService.self = this;
        LoggerService.self.loggers = new Array();
    }
    /**
     * Logging for trace
     *
     * @param {ILogMessage} log log message
     * @memberof LoggerService
     */
    LoggerService.prototype.trace = function (log) {
        LoggerService.self.writeLog('TRACE', this.parseStringMessage(log));
    };
    /**
     * Logging for debug
     *
     * @param {ILogMessage} log log message
     * @memberof LoggerService
     */
    LoggerService.prototype.debug = function (log) {
        LoggerService.self.writeLog('DEBUG', this.parseStringMessage(log));
    };
    /**
     * Logging for info
     *
     * @param {ILogMessage} log log message
     * @memberof LoggerService
     */
    LoggerService.prototype.info = function (log) {
        LoggerService.self.writeLog('INFO', this.parseStringMessage(log));
    };
    /**
     * Logging for log
     *
     * @param {ILogMessage} log log message
     * @memberof LoggerService
     */
    LoggerService.prototype.log = function (log) {
        LoggerService.self.writeLog('LOG', this.parseStringMessage(log));
    };
    /**
     * Logging for warning
     *
     * @param {ILogMessage} log log message
     * @memberof LoggerService
     */
    LoggerService.prototype.warn = function (log) {
        LoggerService.self.writeLog('WARN', this.parseStringMessage(log));
    };
    /**
     * Logging for error
     *
     * @param {ILogMessage} log log message
     * @memberof LoggerService
     */
    LoggerService.prototype.error = function (log) {
        this.createLogWithStackTrace('ERROR', log);
    };
    /**
     * Logging for error
     *
     * @param {ILogMessage} log log message
     * @memberof LoggerService
     */
    LoggerService.prototype.systemError = function (log) {
        this.createLogWithStackTrace('SYSTEM_ERROR', log);
    };
    /**
     * Create log with stack trace
     *
     * @private
     * @param {string} logType
     * @param {(ILogMessage | string)} log
     * @memberof LoggerService
     */
    LoggerService.prototype.createLogWithStackTrace = function (logType, log) {
        var _this = this;
        var formatLog = this.parseStringMessage(log);
        (function () { return __awaiter(_this, void 0, void 0, function () {
            var stackTrace, _a, stringifiedStack;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!formatLog.error) return [3 /*break*/, 2];
                        return [4 /*yield*/, StackTrace.fromError(formatLog.error, {
                                offline: true
                            })];
                    case 1:
                        _a = _b.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, StackTrace.get({
                            offline: true
                        })];
                    case 3:
                        _a = _b.sent();
                        _b.label = 4;
                    case 4:
                        stackTrace = _a;
                        stringifiedStack = stackTrace.join('\n');
                        formatLog.stack = stringifiedStack;
                        LoggerService.self.writeLog(logType, formatLog);
                        return [2 /*return*/];
                }
            });
        }); })();
    };
    /**
     * Logging for event
     *
     * @param {ILogMessage} log log message
     * @memberof LoggerService
     */
    LoggerService.prototype.event = function (log) {
        LoggerService.self.writeLog('EVENT', this.parseStringMessage(log));
    };
    /**
     * Logging for event
     *
     * @param {ILogMessage} log log message
     * @memberof LoggerService
     */
    LoggerService.prototype.tapEvent = function (log) {
        LoggerService.self.writeLog('TAP_EVENT', this.parseStringMessage(log));
    };
    /**
     * Add the logger.
     *
     * @param {ILogger} logger logger
     * @memberof LoggerService
     */
    LoggerService.prototype.addLogger = function (logger) {
        LoggerService.self.loggers.push(logger);
    };
    /**
     * parse string messages
     *
     * @private
     * @param {(ILogMessage | string)} log
     * @returns {ILogMessage}
     * @memberof LoggerService
     */
    LoggerService.prototype.parseStringMessage = function (log) {
        if (typeof log === 'string' || log instanceof String) {
            return { message: log.toString() };
        }
        return log;
    };
    /**
     * Write a log message.
     *
     * @private
     * @param {string} level log level
     * @param {ILogMessage} log log message
     * @returns {any}
     * @memberof LoggerService
     */
    LoggerService.prototype.writeLog = function (level, log) {
        return new Promise(function (resolve, reject) {
            try {
                var now_1 = new Date(Date.now());
                LoggerService.self.loggers.forEach(function (e) { return e.write(now_1, level, log); });
                resolve('');
            }
            catch (error) {
                reject();
            }
        });
    };
    LoggerService.ɵfac = function LoggerService_Factory(t) { return new (t || LoggerService)(); };
    LoggerService.ɵprov = i0.ɵɵdefineInjectable({ token: LoggerService, factory: LoggerService.ɵfac });
    return LoggerService;
}());
export { LoggerService };
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(LoggerService, [{
        type: Injectable
    }], function () { return []; }, null); })();
//# sourceMappingURL=logger.service.js.map