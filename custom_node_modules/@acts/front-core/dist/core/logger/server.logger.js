var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AbstractLogger } from './logger';
/**
 * Server logger
 */
var ServerLogger = /** @class */ (function (_super) {
    __extends(ServerLogger, _super);
    /**
     * Creates an instance of ServerLogger.
     * @param {IServerLoggerConfig} config configuration for server log
     * @param {Http} http Http module
     * @memberof ServerLogger
     */
    function ServerLogger(config, httpClient) {
        var _this = _super.call(this, config.level) || this;
        _this.config = config;
        _this.httpClient = httpClient;
        return _this;
    }
    /**
     * Write a log message.
     *
     * @param {Date} datetime date and time for log
     * @param {string} level log level
     * @param {ILogMessage} log log message
     * @returns {void} Nohting
     * @memberof ConsoleLogger
     */
    ServerLogger.prototype.write = function (datetime, level, log) {
        if (!this.config.url) {
            return;
        }
        // if no message or the log level is less than the environ
        if (!this.isValid(level)) {
            return;
        }
        // create a body
        var body = {
            datetime: datetime,
            level: level,
            message: log.message,
            param: log.param,
            stack: log.stack
        };
        this.httpClient.post(this.config.url, body).subscribe({
            next: function (value) { return console.log(value); },
            error: function (error) { return console.log(error); }
        });
    };
    return ServerLogger;
}(AbstractLogger));
export { ServerLogger };
//# sourceMappingURL=server.logger.js.map