/**
 * Define the ILogger interaface
 */
import { Levels } from './logger.service';
/**
 * Define basic logger
 */
var AbstractLogger = /** @class */ (function () {
    /**
     * Creates an instance of AbstractLogger.
     * @param {string} level log level
     * @memberof AbstractLogger
     */
    function AbstractLogger(level) {
        this.logLevel = this.getLogLevel(level);
    }
    /**
     * Gets the log level
     *
     * @private
     * @param {string} level string of log level
     * @returns {number} index of Levels for log level based
     * @memberof AbstractLogger
     */
    AbstractLogger.prototype.getLogLevel = function (level) {
        var i = Levels.findIndex(function (element) { return element === level; });
        if (i === -1) {
            throw new Error('The log level is invalid.[' + level + ']');
        }
        return i;
    };
    /**
     * Check the log level for can output or not.
     *
     * @protected
     * @param {string} level log level
     * @returns {boolean} true if log level is valid; otherwise, false.
     * @memberof AbstractLogger
     */
    AbstractLogger.prototype.isValid = function (level) {
        var i = Levels.findIndex(function (element) { return element === level; });
        return !(i === -1 || this.logLevel === -1 || i < this.logLevel);
    };
    return AbstractLogger;
}());
export { AbstractLogger };
//# sourceMappingURL=logger.js.map