import { ILogger } from './logger';
import * as i0 from "@angular/core";
/**
 * Logging Level
 */
export declare const Levels: string[];
/**
 * Log message
 *
 * @export
 * @interface ILogMessage
 */
export interface ILogMessage {
    /**
     * Log message
     *
     * @type {string}
     * @memberof ILogMessage
     */
    message: string;
    /**
     * Stack trace
     *
     * @type {string}
     * @memberof ILogMessage
     */
    param?: string;
    /**
     * Stack trace
     *
     * @type {string}
     * @memberof ILogMessage
     */
    stack?: string;
    /**
     * Stack trace
     *
     * @type {string}
     * @memberof ILogMessage
     */
    error?: Error;
}
/**
 * Logger service
 */
export declare class LoggerService {
    /**
     * LoggerService
     *
     * @static
     * @type {LoggerService}
     * @memberof LoggerService
     */
    static self: LoggerService;
    /**
     * Loggers
     *
     * @private
     * @type {Array<ILogger>}
     * @memberof LoggerService
     */
    private loggers;
    /**
     * Creates an instance of LoggerService.
     * @memberof LoggerService
     */
    constructor();
    /**
     * Logging for trace
     *
     * @param {ILogMessage} log log message
     * @memberof LoggerService
     */
    trace(log: ILogMessage | string): void;
    /**
     * Logging for debug
     *
     * @param {ILogMessage} log log message
     * @memberof LoggerService
     */
    debug(log: ILogMessage | string): void;
    /**
     * Logging for info
     *
     * @param {ILogMessage} log log message
     * @memberof LoggerService
     */
    info(log: ILogMessage | string): void;
    /**
     * Logging for log
     *
     * @param {ILogMessage} log log message
     * @memberof LoggerService
     */
    log(log: ILogMessage | string): void;
    /**
     * Logging for warning
     *
     * @param {ILogMessage} log log message
     * @memberof LoggerService
     */
    warn(log: ILogMessage | string): void;
    /**
     * Logging for error
     *
     * @param {ILogMessage} log log message
     * @memberof LoggerService
     */
    error(log: ILogMessage | string): void;
    /**
     * Logging for error
     *
     * @param {ILogMessage} log log message
     * @memberof LoggerService
     */
    systemError(log: ILogMessage | string): void;
    /**
     * Create log with stack trace
     *
     * @private
     * @param {string} logType
     * @param {(ILogMessage | string)} log
     * @memberof LoggerService
     */
    private createLogWithStackTrace;
    /**
     * Logging for event
     *
     * @param {ILogMessage} log log message
     * @memberof LoggerService
     */
    event(log: ILogMessage | string): void;
    /**
     * Logging for event
     *
     * @param {ILogMessage} log log message
     * @memberof LoggerService
     */
    tapEvent(log: ILogMessage | string): void;
    /**
     * Add the logger.
     *
     * @param {ILogger} logger logger
     * @memberof LoggerService
     */
    addLogger(logger: ILogger): void;
    /**
     * parse string messages
     *
     * @private
     * @param {(ILogMessage | string)} log
     * @returns {ILogMessage}
     * @memberof LoggerService
     */
    private parseStringMessage;
    /**
     * Write a log message.
     *
     * @private
     * @param {string} level log level
     * @param {ILogMessage} log log message
     * @returns {any}
     * @memberof LoggerService
     */
    private writeLog;
    static ɵfac: i0.ɵɵFactoryDef<LoggerService, never>;
    static ɵprov: i0.ɵɵInjectableDef<LoggerService>;
}
