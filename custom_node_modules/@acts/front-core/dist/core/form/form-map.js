var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { FormGroup } from '@angular/forms';
/**
 * Extends FormGroup so it contains definition of map items for further creation
 *
 * @export
 * @class FormMap
 * @extends {FormGroup}
 */
var FormMap = /** @class */ (function (_super) {
    __extends(FormMap, _super);
    function FormMap(createControl, controls) {
        var rest = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            rest[_i - 2] = arguments[_i];
        }
        var _this = _super.apply(this, __spreadArrays([controls], rest)) || this;
        _this.createControl = createControl;
        return _this;
    }
    /**
     * set value to form
     *
     * @param {Record<string, any>} value
     * @param {{ onlySelf?: boolean; emitEvent?: boolean }} [options={}]
     * @memberof FormMap
     */
    FormMap.prototype.setValue = function (value, options) {
        if (options === void 0) { options = {}; }
        this.setShape(Object.keys(value));
        _super.prototype.setValue.call(this, value, options);
    };
    /**
     * Sets child controls for a specified list of keys
     * @param keys list of keys new form group should contain
     */
    FormMap.prototype.setShape = function (keys) {
        var _this = this;
        var allKeys = new Set(__spreadArrays(keys, Object.keys(this.controls)));
        allKeys.forEach(function (key) {
            // add control for a new one
            if (!(key in _this.controls)) {
                _this.addControl(key, _this.createControl());
            }
            // remove control if missing
            else if (!keys.includes(key)) {
                _this.removeControl(key);
            }
        });
    };
    return FormMap;
}(FormGroup));
export { FormMap };
//# sourceMappingURL=form-map.js.map