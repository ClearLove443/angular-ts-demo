import { FormArray, FormControl, FormGroup } from '@angular/forms';
import { FormArrayExtended } from './form-array-extended';
import { FormMap } from './form-map';
/**
 * Recursively sets values of nested controls so nested object === null/undefined
 * does not cause failure as in case of AbstractControl.patchValue
 * @param control target FormControl, FormArray or FormGroup
 * @param value source data
 */
export function safeSetValue(control, value) {
    if (control instanceof FormControl) {
        control.setValue(value, { emitEvent: false });
        return;
    }
    if (control instanceof FormArrayExtended) {
        if (nullOrUndef(value)) {
            value = [];
        }
        if (!Array.isArray(value)) {
            throw new TypeError("Cannot set value '" + value + "' on FormArrayExtended");
        }
        control.setSize(value.length);
        control.controls.forEach(function (c, idx) { return safeSetValue(c, value[idx]); });
    }
    else if (control instanceof FormMap) {
        if (nullOrUndef(value)) {
            value = {};
        }
        if (typeof value !== 'object' || Array.isArray(value)) {
            throw new TypeError("Cannot set value '" + value + "' on FormMap");
        }
        control.setShape(Object.keys(value));
        Object.entries(control.controls).forEach(function (_a) {
            var name = _a[0], c = _a[1];
            return safeSetValue(c, value[name]);
        });
    }
    else if (control instanceof FormArray) {
        control.controls.forEach(function (child, idx) {
            return safeSetValue(child, getValue(value, idx));
        });
    }
    else if (control instanceof FormGroup) {
        Object.keys(control.controls).forEach(function (name) {
            safeSetValue(control.controls[name], getValue(value, name));
        });
    }
}
/**
 * null and undefined check
 *
 * @param {*} input
 * @returns
 */
function nullOrUndef(input) {
    return input === undefined || input === null;
}
/**
 * null safe get value
 *
 * @param {*} input
 * @param {(string | number)} attribute
 * @returns
 */
function getValue(input, attribute) {
    return nullOrUndef(input) || typeof input !== 'object'
        ? undefined
        : input[attribute];
}
//# sourceMappingURL=form.utils.js.map