var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { FormArray } from '@angular/forms';
/**
 * Extends FormArray so it contains definition of items for further creation
 *
 * @export
 * @class FormArrayExtended
 * @extends {FormArray}
 */
var FormArrayExtended = /** @class */ (function (_super) {
    __extends(FormArrayExtended, _super);
    function FormArrayExtended(createControl, controls) {
        var rest = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            rest[_i - 2] = arguments[_i];
        }
        var _this = _super.apply(this, __spreadArrays([controls], rest)) || this;
        _this.createControl = createControl;
        return _this;
    }
    /**
     * set form value
     *
     * @param {any[]} value
     * @param {{ onlySelf?: boolean; emitEvent?: boolean }} [options={}]
     * @memberof FormArrayExtended
     */
    FormArrayExtended.prototype.setValue = function (value, options) {
        if (options === void 0) { options = {}; }
        this.setSize(value.length);
        _super.prototype.setValue.call(this, value, options);
    };
    /**
     * Sets specified number of controls in the array
     * @param size of the array
     */
    FormArrayExtended.prototype.setSize = function (size) {
        while (size < this.controls.length) {
            this.removeAt(0);
        }
        while (size > this.controls.length) {
            this.push(this.createControl());
        }
    };
    return FormArrayExtended;
}(FormArray));
export { FormArrayExtended };
//# sourceMappingURL=form-array-extended.js.map