import { Inject, Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * GoogleTagManagerService
 *
 * @export
 * @class GoogleTagManagerService
 */
var GoogleTagManagerService = /** @class */ (function () {
    /**
     *Creates an instance of GoogleTagManagerService.
     * @param {string} googleTagManagerId
     * @memberof GoogleTagManagerService
     */
    function GoogleTagManagerService(googleTagManagerId) {
        this.googleTagManagerId = googleTagManagerId;
        this.isLoaded = false;
        this.browserGlobals = {
            windowRef: function () {
                return window;
            },
            documentRef: function () {
                return document;
            }
        };
        this.gtmId = googleTagManagerId;
    }
    /**
     * Get dataLayer object.
     *
     * @returns {*}
     * @memberof GoogleTagManagerService
     */
    GoogleTagManagerService.prototype.getDataLayer = function () {
        var window = this.browserGlobals.windowRef();
        window['dataLayer'] = window['dataLayer'] || [];
        return window['dataLayer'];
    };
    /**
     * Push data on dataLayer.
     *
     * @private
     * @param {object} obj
     * @memberof GoogleTagManagerService
     */
    GoogleTagManagerService.prototype.pushOnDataLayer = function (obj) {
        var dataLayer = this.getDataLayer();
        dataLayer.push(obj);
    };
    /**
     * Add gtm.js to dom.
     *
     * @memberof GoogleTagManagerService
     */
    GoogleTagManagerService.prototype.addGtmToDom = function () {
        var doc = this.browserGlobals.documentRef();
        this.pushOnDataLayer({
            'gtm.start': new Date().getTime(),
            event: 'gtm.js'
        });
        var gtmScript = doc.createElement('script');
        gtmScript.id = 'GTMscript';
        gtmScript.async = true;
        gtmScript.src = 'https://www.googletagmanager.com/gtm.js?id=' + this.gtmId;
        doc.head.insertBefore(gtmScript, doc.head.firstChild);
        var ifrm = doc.createElement('iframe');
        ifrm.setAttribute('src', 'https://www.googletagmanager.com/ns.html?id=' + this.gtmId);
        ifrm.style.width = '0';
        ifrm.style.height = '0';
        ifrm.style.display = 'none';
        ifrm.style.visibility = 'hidden';
        var noscript = doc.createElement('noscript');
        noscript.id = 'GTMiframe';
        noscript.appendChild(ifrm);
        doc.body.insertBefore(noscript, doc.body.firstChild);
        this.isLoaded = true;
    };
    /**
     * Push tag.
     *
     * @param {object} item
     * @memberof GoogleTagManagerService
     */
    GoogleTagManagerService.prototype.pushTag = function (item) {
        if (!this.isLoaded) {
            this.addGtmToDom();
        }
        this.pushOnDataLayer(item);
    };
    GoogleTagManagerService.ɵfac = function GoogleTagManagerService_Factory(t) { return new (t || GoogleTagManagerService)(i0.ɵɵinject('GOOGLE_TAG_MANAGER_ID')); };
    GoogleTagManagerService.ɵprov = i0.ɵɵdefineInjectable({ token: GoogleTagManagerService, factory: GoogleTagManagerService.ɵfac, providedIn: 'root' });
    return GoogleTagManagerService;
}());
export { GoogleTagManagerService };
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(GoogleTagManagerService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: ['GOOGLE_TAG_MANAGER_ID']
            }] }]; }, null); })();
//# sourceMappingURL=google-tag-manager.service.js.map