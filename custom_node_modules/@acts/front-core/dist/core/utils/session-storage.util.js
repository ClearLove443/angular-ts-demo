/**
 * Define the storage service uses session storage
 *
 * @export
 * @class SessionStorageUtil
 */
var SessionStorageUtil = /** @class */ (function () {
    function SessionStorageUtil() {
    }
    /**
     * Gets the value from storage
     *
     * @param {string} key storage key
     * @returns {*} value
     * @memberof SessionStorageUtil
     */
    SessionStorageUtil.GET = function (key) {
        var value = JSON.parse(sessionStorage.getItem(key)) !== null
            ? JSON.parse(sessionStorage.getItem(key))
            : undefined;
        return value;
    };
    /**
     * Get the key/value of the specified key from session storage.
     * Key can be set as regular expression.
     * If the key is not set, return all key/value.
     *
     * @static
     * @param {string} [key]
     * @returns {object}
     * @memberof SessionStorageUtil
     */
    SessionStorageUtil.GET_ITEMS = function (key) {
        var results = {};
        for (var item in sessionStorage) {
            if (sessionStorage.hasOwnProperty(item)) {
                if (item.match(key) || (!key && typeof item === 'string')) {
                    results[item] = sessionStorage.getItem(item);
                }
            }
        }
        return results;
    };
    /**
     * Determine whether the key is included in session storage or not
     *
     * @static
     * @param {string} key
     * @returns {boolean}
     * @memberof SessionStorageUtil
     */
    SessionStorageUtil.HAS = function (key) {
        if (typeof key === 'string') {
            return sessionStorage.hasOwnProperty(key);
        }
        else {
            var result = false;
            for (var item in sessionStorage) {
                if (sessionStorage.hasOwnProperty(item)) {
                    if (item.match(key) || (!key && typeof item === 'string')) {
                        result = true;
                        break;
                    }
                }
            }
            return result;
        }
    };
    /**
     * Sets the value to storage
     *
     * @param {string} key storage key
     * @param {*} value store value
     * @memberof SessionStorageUtil
     */
    SessionStorageUtil.SET = function (key, value) {
        sessionStorage.setItem(key, JSON.stringify(value));
    };
    /**
     * Remove the specified item.
     *
     * @param {string} key storage key
     * @memberof SessionStorageUtil
     */
    SessionStorageUtil.REMOVE = function (key) {
        sessionStorage.removeItem(key);
    };
    /**
     * Remove the all session storage items matching the key
     *
     * @static
     * @param {string} key
     * @memberof SessionStorageUtil
     */
    SessionStorageUtil.REMOVE_ITEMS = function (key) {
        for (var item in sessionStorage) {
            if (sessionStorage.hasOwnProperty(item)) {
                if (item.match(key)) {
                    sessionStorage.removeItem(item);
                }
            }
        }
    };
    return SessionStorageUtil;
}());
export { SessionStorageUtil };
//# sourceMappingURL=session-storage.util.js.map