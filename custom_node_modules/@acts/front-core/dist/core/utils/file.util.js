/**
 * Version Check Utils
 *
 * @export
 * @class VersionUtil
 */
var FileUtil = /** @class */ (function () {
    function FileUtil() {
    }
    /**
     * Base64 string to Blob
     *
     * @static
     * @param {string} base64
     * @param {string} type
     * @returns {Blob}
     * @memberof FileUtil
     */
    FileUtil.BASE64_TO_BLOB = function (b64Data, contentType, sliceSize) {
        if (sliceSize === void 0) { sliceSize = 512; }
        var byteCharacters = atob(b64Data);
        var byteArrays = [];
        for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
            var slice = byteCharacters.slice(offset, offset + sliceSize);
            var byteNumbers = new Array(slice.length);
            for (var i = 0; i < slice.length; i++) {
                byteNumbers[i] = slice.charCodeAt(i);
            }
            var byteArray = new Uint8Array(byteNumbers);
            byteArrays.push(byteArray);
        }
        return new Blob(byteArrays, { type: contentType });
    };
    /**
     * Blob to Base64 string
     *
     * @static
     * @param {Blob} blob
     * @returns {Promise<string>}
     * @memberof FileUtil
     */
    FileUtil.BLOB_TO_BASE64 = function (blob) {
        var temporaryFileReader = new FileReader();
        return new Promise(function (resolve, reject) {
            temporaryFileReader.onerror = function () {
                temporaryFileReader.abort();
                reject(new DOMException('Problem parsing input file.'));
            };
            temporaryFileReader.onload = function () {
                resolve(temporaryFileReader.result.toString());
            };
            temporaryFileReader.readAsDataURL(blob);
        });
    };
    return FileUtil;
}());
export { FileUtil };
//# sourceMappingURL=file.util.js.map