import { interval, Observable, timer } from 'rxjs';
import { Injectable, Injector, NgZone } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * The define utility functions for setTimeout/setInterval wrapper
 *
 * @export
 * @class TimerUtil
 */
var TimerUtil = /** @class */ (function () {
    /**
     * Creates an instance of BaseComponent.
     * @param {Injector} injector
     * @memberof BaseComponent
     */
    function TimerUtil(injector) {
        this.injector = injector;
    }
    /**
     * setTimeout Observable
     *
     * @param {number} msec
     * @returns {Observable<any>}
     * @memberof TimerUtil
     */
    TimerUtil.prototype.timeout = function (msec) {
        return this.runOutsideZone(function () { return timer(msec); });
    };
    /**
     * setInterval Observable
     *
     * @param {number} msec
     * @returns {Observable<any>}
     * @memberof TimerUtil
     */
    TimerUtil.prototype.interval = function (msec) {
        return this.runOutsideZone(function () { return interval(msec); });
    };
    /**
     * create Observer
     *
     * @private
     * @param {() => Observable<any>} observable
     * @returns {Observable<any>}
     * @memberof TimerUtil
     */
    TimerUtil.prototype.runOutsideZone = function (observable) {
        var zone = this.injector.get(NgZone);
        return new Observable(function (observer) {
            var subscription;
            zone.runOutsideAngular(function () {
                subscription = observable().subscribe({
                    next: function (n) {
                        zone.run(function () { return observer.next(n); });
                    },
                    error: function (e) {
                        zone.run(function () { return observer.error(e); });
                    },
                    complete: function () {
                        zone.run(function () { return observer.complete(); });
                    }
                });
            });
            return function () {
                if (subscription) {
                    subscription.unsubscribe();
                }
            };
        });
    };
    TimerUtil.ɵfac = function TimerUtil_Factory(t) { return new (t || TimerUtil)(i0.ɵɵinject(i0.Injector)); };
    TimerUtil.ɵprov = i0.ɵɵdefineInjectable({ token: TimerUtil, factory: TimerUtil.ɵfac });
    return TimerUtil;
}());
export { TimerUtil };
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TimerUtil, [{
        type: Injectable
    }], function () { return [{ type: i0.Injector }]; }, null); })();
//# sourceMappingURL=timer.util.js.map