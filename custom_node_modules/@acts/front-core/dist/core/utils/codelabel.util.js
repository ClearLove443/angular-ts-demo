import { Injectable, Injector } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import * as i0 from "@angular/core";
/**
 * TranslateService wrapper for CodeLabel mapping
 *
 * @export
 * @class CodeLabelUtil
 */
var CodeLabelUtil = /** @class */ (function () {
    function CodeLabelUtil(injector) {
        this.injector = injector;
        this.translate = this.injector.get(TranslateService);
    }
    /**
     *Gets code using codename and code passed by parameter.
     * If the code does not exist, return the key(codename.code)
     *
     * @param {string} codename
     * @param {string} code
     * @returns {string}
     * @memberof CodeLabelUtil
     */
    CodeLabelUtil.prototype.get = function (codename, code) {
        return this.translate.instant(codename + '.' + code, String);
    };
    /**
     *Get all code mapping pair for the codename
     *
     * @param {string} codename
     * @returns {Object}
     * @memberof CodeLabelUtil
     */
    CodeLabelUtil.prototype.getAll = function (codename) {
        return this.translate.instant(codename);
    };
    CodeLabelUtil.ɵfac = function CodeLabelUtil_Factory(t) { return new (t || CodeLabelUtil)(i0.ɵɵinject(i0.Injector)); };
    CodeLabelUtil.ɵprov = i0.ɵɵdefineInjectable({ token: CodeLabelUtil, factory: CodeLabelUtil.ɵfac });
    return CodeLabelUtil;
}());
export { CodeLabelUtil };
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(CodeLabelUtil, [{
        type: Injectable
    }], function () { return [{ type: i0.Injector }]; }, null); })();
//# sourceMappingURL=codelabel.util.js.map