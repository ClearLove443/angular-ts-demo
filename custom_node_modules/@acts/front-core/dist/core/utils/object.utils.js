import 'reflect-metadata';
import * as _ from 'lodash';
/**
 * ObjectUtils
 *
 * @export
 * @class ObjectUtils
 */
var ObjectUtils = /** @class */ (function () {
    function ObjectUtils() {
    }
    /**
     * is Primitive
     *
     * @static
     * @param {*} target
     * @returns {boolean}
     * @memberof ObjectUtils
     */
    ObjectUtils.isPrimitive = function (target) {
        if (typeof target === 'string' ||
            typeof target === 'number' ||
            typeof target === 'boolean') {
            return true;
        }
        return (target instanceof String ||
            target === String ||
            target instanceof Number ||
            target === Number ||
            target instanceof Boolean ||
            target === Boolean);
    };
    /**
     * is Function
     *
     * @static
     * @param {*} target
     * @returns {boolean}
     * @memberof ObjectUtils
     */
    ObjectUtils.isFunction = function (target) {
        return target instanceof Function;
    };
    /**
     * is Array
     *
     * @static
     * @param {*} target
     * @returns {boolean}
     * @memberof ObjectUtils
     */
    ObjectUtils.isArray = function (target) {
        return target === Array || Array.isArray(target) || target instanceof Array;
    };
    /**
     * get Class
     *
     * @static
     * @param {*} target
     * @param {string} propertyName
     * @returns {*}
     * @memberof ObjectUtils
     */
    ObjectUtils.getClass = function (target, propertyName) {
        return Reflect.getMetadata('design:type', target, propertyName);
    };
    /**
     * copyObjectValues
     *
     * @static
     * @param {*} toBeCopied
     * @param {*} original
     * @memberof ObjectUtils
     */
    ObjectUtils.copyObjectValues = function (toBeCopied, original) {
        Object.keys(toBeCopied).forEach(function (key) {
            if (original.hasOwnProperty(key)) {
                original[key] = toBeCopied[key];
            }
        });
    };
    /**
     * object clone
     *
     * @static
     * @param {*} target
     * @returns {*}
     * @memberof ObjectUtils
     */
    ObjectUtils.clone = function (target) {
        if (target === undefined || target === null) {
            return target;
        }
        return _.cloneDeep(target);
    };
    return ObjectUtils;
}());
export { ObjectUtils };
//# sourceMappingURL=object.utils.js.map