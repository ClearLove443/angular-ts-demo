import { LoggerService } from '../logger/logger.service';
export var ignoreFunctionList = {
    constructor: true,
    ionViewDidLoad: true,
    ionViewWillEnter: true,
    ionViewDidEnter: true,
    ionViewWillLeave: true,
    ionViewDidLeave: true,
    ionViewWillUnload: true,
    ionViewCanEnter: true,
    ionViewCanLeave: true,
    ngOnChanges: true,
    ngOnInit: true,
    ngDoCheck: true,
    ngAfterContentInit: true,
    ngAfterContentChecked: true,
    ngAfterViewInit: true,
    ngAfterViewChecked: true,
    ngOnDestroy: true,
    formatDate: true,
    displayTransactionStatus: true,
    transformValue: true
};
/**
 * EventLog Decorator
 *
 * @export
 * @param {string} [prefix=''] event name prefix
 * @param {boolean} [isTap=false] true:tap event
 * @returns
 */
export function EventLog(prefix, isTap) {
    if (prefix === void 0) { prefix = ''; }
    if (isTap === void 0) { isTap = false; }
    return function (target, name, descriptor) {
        if (descriptor) {
            // decorating a method
            var original_1 = descriptor.value;
            // tslint:disable-next-line: typedef
            descriptor.value = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var ret = original_1.apply(this, args);
                ret = ret !== undefined ? ret : '';
                var log = {
                    message: prefix + target.constructor.name + '.' + name,
                    param: ret
                };
                if (isTap) {
                    LoggerService.self.tapEvent(log);
                }
                else {
                    LoggerService.self.event(log);
                }
                return ret;
            };
            return descriptor;
        }
        else {
            Object.getOwnPropertyNames(target.prototype).forEach(function (methodName) {
                if (ignoreFunctionList[methodName]) {
                    return;
                }
                var original = target.prototype[methodName];
                if (typeof original !== 'function') {
                    return;
                }
                // tslint:disable-next-line: typedef
                target.prototype[methodName] = function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    var ret = original.apply(this, args);
                    var log = {
                        message: prefix + target.name + '.' + methodName,
                        param: ret
                    };
                    if (isTap) {
                        LoggerService.self.tapEvent(log);
                    }
                    else {
                        LoggerService.self.event(log);
                    }
                    return ret;
                };
            });
            return target;
        }
    };
}
//# sourceMappingURL=event-log.js.map