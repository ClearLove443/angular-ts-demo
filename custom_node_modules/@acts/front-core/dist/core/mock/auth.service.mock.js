var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Observable } from 'rxjs';
import { Injectable } from '@angular/core';
import { createAuth } from '../auth/auth.model';
import { AuthService } from '../auth/auth.service';
import * as i0 from "@angular/core";
/**
 * Auth service mock version
 *
 * @export
 * @class AuthServiceMock
 * @extends {AuthService}
 */
var AuthServiceMock = /** @class */ (function (_super) {
    __extends(AuthServiceMock, _super);
    function AuthServiceMock() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * mock login
     *
     * @param {AuthCredential} credential
     * @returns {Subscription}
     * @memberof AuthServiceMock
     */
    AuthServiceMock.prototype.login = function (credential) {
        var _this = this;
        var token = 'dummy';
        var result = {
            userId: credential.userId,
            token: token,
            firstName: 'taro',
            lastName: 'tanaka'
        };
        return new Observable(function (observer) {
            observer.next(createAuth(result));
            observer.complete();
        }).subscribe(function (auth) {
            _this.authStore.update({
                auth: createAuth(auth)
            });
        });
    };
    AuthServiceMock.ɵfac = function AuthServiceMock_Factory(t) { return ɵAuthServiceMock_BaseFactory(t || AuthServiceMock); };
    AuthServiceMock.ɵprov = i0.ɵɵdefineInjectable({ token: AuthServiceMock, factory: AuthServiceMock.ɵfac });
    return AuthServiceMock;
}(AuthService));
export { AuthServiceMock };
var ɵAuthServiceMock_BaseFactory = /*@__PURE__*/ i0.ɵɵgetInheritedFactory(AuthServiceMock);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AuthServiceMock, [{
        type: Injectable
    }], null, null); })();
//# sourceMappingURL=auth.service.mock.js.map