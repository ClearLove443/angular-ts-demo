import { map } from 'rxjs/operators';
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { CoreEnvironmentManager } from '../core.environment';
import { createAuth } from './auth.model';
import { AuthStore } from './auth.store';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../core.environment";
import * as i3 from "./auth.store";
/**
 * Auth business logic
 *
 * @export
 * @class AuthInterceptor
 * @implements {HttpInterceptor}
 */
var AuthService = /** @class */ (function () {
    function AuthService(httpClient, environment, authStore) {
        this.httpClient = httpClient;
        this.environment = environment;
        this.authStore = authStore;
    }
    /**
     * login
     *
     * @param {AuthCredential} credos
     * @returns
     * @memberof AuthService
     */
    AuthService.prototype.login = function (credos) {
        var _this = this;
        return this.httpClient
            .post(this.environment.env.apiUrl.login, credos)
            .pipe(map(function (response) { return response; }))
            .subscribe(function (auth) {
            _this.authStore.update({
                auth: createAuth(auth)
            });
        });
    };
    /**
     * logout
     *
     * @memberof AuthService
     */
    AuthService.prototype.logout = function () {
        this.authStore.remove();
    };
    AuthService.ɵfac = function AuthService_Factory(t) { return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CoreEnvironmentManager), i0.ɵɵinject(i3.AuthStore)); };
    AuthService.ɵprov = i0.ɵɵdefineInjectable({ token: AuthService, factory: AuthService.ɵfac });
    return AuthService;
}());
export { AuthService };
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AuthService, [{
        type: Injectable
    }], function () { return [{ type: i1.HttpClient }, { type: i2.CoreEnvironmentManager }, { type: i3.AuthStore }]; }, null); })();
//# sourceMappingURL=auth.service.js.map