var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Injectable } from '@angular/core';
import { QueryEntity } from '@datorama/akita';
import { AuthStore } from './auth.store';
import * as i0 from "@angular/core";
import * as i1 from "./auth.store";
/**
 * AuthQuery
 *
 * @export
 * @class AuthQuery
 * @extends {QueryEntity<AuthState, Auth>}
 */
var AuthQuery = /** @class */ (function (_super) {
    __extends(AuthQuery, _super);
    function AuthQuery(store) {
        var _this = _super.call(this, store) || this;
        _this.store = store;
        /**
         * Observable logged in state
         *
         * @memberof AuthQuery
         */
        _this.isLoggedIn$ = _this.select(function (auth) { return auth.auth && !!auth.auth.accessToken; });
        return _this;
    }
    /**
     * Pick token
     *
     * @memberof AuthQuery
     */
    AuthQuery.prototype.getAuthorizationToken = function () {
        return this.getValue().auth ? this.getValue().auth.accessToken : undefined;
    };
    /**
     * Pick token
     *
     * @memberof AuthQuery
     */
    AuthQuery.prototype.getRefreshToken = function () {
        return this.getValue().auth ? this.getValue().auth.refreshToken : undefined;
    };
    /**
     * Pick user ID
     *
     * @memberof AuthQuery
     */
    AuthQuery.prototype.getUserId = function () {
        return this.getValue().auth ? this.getValue().auth.uuid : undefined;
    };
    /**
     * is login
     *
     * @memberof AuthQuery
     */
    AuthQuery.prototype.isLogin = function () {
        return !!this.getValue().auth && !!this.getValue().auth.accessToken;
    };
    AuthQuery.ɵfac = function AuthQuery_Factory(t) { return new (t || AuthQuery)(i0.ɵɵinject(i1.AuthStore)); };
    AuthQuery.ɵprov = i0.ɵɵdefineInjectable({ token: AuthQuery, factory: AuthQuery.ɵfac, providedIn: 'root' });
    return AuthQuery;
}(QueryEntity));
export { AuthQuery };
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AuthQuery, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: i1.AuthStore }]; }, null); })();
//# sourceMappingURL=auth.query.js.map