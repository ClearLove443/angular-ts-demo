import 'reflect-metadata';
import { ObjectUtils } from '../utils/object.utils';
/**
 * JsonProperty Decorator
 *
 * @export
 * @template T
 * @param {(PropertyMetadata<T> | string)} [metadata]
 * @returns {*}
 */
export function JsonProperty(metadata) {
    var name;
    var clazz;
    if (metadata instanceof String || typeof metadata === 'string') {
        name = metadata;
    }
    else {
        name = metadata.name;
        clazz = metadata.clazz;
    }
    return Reflect.metadata('jsonProperty', {
        name: name,
        clazz: clazz
    });
}
/**
 * Json Parameter Mapper Class
 *
 * @export
 * @class JsonTypeMapper
 */
var JsonTypeMapper = /** @class */ (function () {
    function JsonTypeMapper() {
    }
    /**
     * get JsonProperties Mapping
     *
     * @static
     * @template T
     * @param {*} target
     * @param {string} propertyName
     * @returns {PropertyMetadata<T>}
     * @memberof JsonTypeMapper
     */
    JsonTypeMapper.getJsonProperty = function (target, propertyName) {
        return Reflect.getMetadata('jsonProperty', target, propertyName);
    };
    /**
     * Parse and mapping
     *
     * @static
     * @template T
     * @param {{ new (): T }} clazz
     * @param {*} jsonObject
     * @returns
     * @memberof JsonTypeMapper
     */
    // tslint:disable-next-line: cognitive-complexity
    JsonTypeMapper.parse = function (clazz, jsonObject) {
        if (jsonObject == null) {
            return null;
        }
        if (ObjectUtils.isArray(jsonObject)) {
            return jsonObject.map(function (item) { return JsonTypeMapper.parse(clazz, item); });
        }
        var obj = new clazz();
        Object.keys(obj).forEach(function (key) {
            var propMetadata = JsonTypeMapper.getJsonProperty(obj, key);
            if (propMetadata) {
                var propName = propMetadata.name || key;
                var propValue = jsonObject[propName] !== undefined && jsonObject[propName] !== null
                    ? jsonObject[propName]
                    : {};
                var propType = ObjectUtils.getClass(obj, key);
                if (ObjectUtils.isPrimitive(propType)) {
                    obj[key] = propValue;
                }
                else if (ObjectUtils.isArray(propType)) {
                    obj[key] = propValue.map(function (item) {
                        return JsonTypeMapper.parse(propMetadata.clazz, item);
                    });
                }
                else {
                    obj[key] = JsonTypeMapper.parse(propType, propValue);
                }
            }
            else {
                if (jsonObject && jsonObject[key] !== undefined) {
                    obj[key] = jsonObject[key];
                }
            }
        });
        return obj;
    };
    return JsonTypeMapper;
}());
export { JsonTypeMapper };
//# sourceMappingURL=json-type.mapper.js.map