import 'reflect-metadata';
/**
 * Metadata Properties
 *
 * @export
 * @interface PropertyMetadata
 * @template T
 */
export interface PropertyMetadata<T> {
    name?: string;
    clazz?: new () => T;
}
/**
 * JsonProperty Decorator
 *
 * @export
 * @template T
 * @param {(PropertyMetadata<T> | string)} [metadata]
 * @returns {*}
 */
export declare function JsonProperty<T>(metadata?: PropertyMetadata<T> | string): any;
/**
 * Json Parameter Mapper Class
 *
 * @export
 * @class JsonTypeMapper
 */
export declare class JsonTypeMapper {
    /**
     * get JsonProperties Mapping
     *
     * @static
     * @template T
     * @param {*} target
     * @param {string} propertyName
     * @returns {PropertyMetadata<T>}
     * @memberof JsonTypeMapper
     */
    static getJsonProperty<T>(target: any, propertyName: string): PropertyMetadata<T>;
    /**
     * Parse and mapping
     *
     * @static
     * @template T
     * @param {{ new (): T }} clazz
     * @param {*} jsonObject
     * @returns
     * @memberof JsonTypeMapper
     */
    static parse<T>(clazz: new () => T, jsonObject: any): any;
}
