import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Check if the value is empty
 *
 * @private
 * @param {*} value
 * @returns {boolean}
 * @memberof CommonValidator
 */
function isEmptyInputValue(value) {
    // we don't check for string here so it also works with arrays
    return value == null || value.length === 0;
}
/**
 * Common custom validators
 *
 * @export
 * @class NumberValidator
 */
var CommonValidator = /** @class */ (function () {
    function CommonValidator() {
    }
    /**
     * mustMatchValidator
     * checks if control and matchingControl specified in the 1st and 2nd parameters are the same
     *
     * @static
     * @param {string} controlName
     * @param {string} matchingControlName
     * @returns {ValidatorFn}
     * @memberof CommonValidator
     */
    CommonValidator.mustMatch = function (controlName, matchingControlName) {
        return function (group) {
            var control = group.controls[controlName];
            var matchingControl = group.controls[matchingControlName];
            if ((matchingControl.errors && !matchingControl.errors.mustMatch) ||
                isEmptyInputValue(matchingControl.value)) {
                return;
            }
            if (control.value !== matchingControl.value) {
                matchingControl.setErrors({ mustMatch: true });
            }
            else {
                matchingControl.setErrors(null);
            }
        };
    };
    CommonValidator.ɵfac = function CommonValidator_Factory(t) { return new (t || CommonValidator)(); };
    CommonValidator.ɵprov = i0.ɵɵdefineInjectable({ token: CommonValidator, factory: CommonValidator.ɵfac });
    return CommonValidator;
}());
export { CommonValidator };
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(CommonValidator, [{
        type: Injectable
    }], null, null); })();
//# sourceMappingURL=common.validator.js.map