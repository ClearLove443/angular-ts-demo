import { FormControl, ValidationErrors, ValidatorFn } from '@angular/forms';
import * as i0 from "@angular/core";
/**
 * Custom validators related to numbers
 *
 * @export
 * @class NumberValidator
 */
export declare class NumberValidator {
    /**
     *number validator
     *
     * @static
     * @param {FormControl} control
     * @returns {*}
     * @memberof NumberValidator
     */
    static number(control: FormControl): any;
    /**
     * telephone number validator
     *
     * @static
     * @param {FormControl} fc
     * @returns
     * @memberof NumberValidator
     */
    static telephone(fc: FormControl): {
        telephone: boolean;
    };
    /**
     * Date format validator
     * Only supports 1900 to 2099
     * Does not have validation for leap year or dates which does not exist (like april 31st)
     * @static
     * @param {string} [delimiter='']
     * @returns {ValidatorFn}
     * @memberof NumberValidator
     */
    static date(delimiter?: string): ValidatorFn;
    /**
     * Validate the currentDate format by delimiters
     * @param separator
     */
    /**
     * Validate the currentDate format by delimiters
     *
     * @static
     * @param {string} currentDate
     * @returns {*}
     * @memberof StringValidator
     */
    static validatorDateFormat(currentDate: string, delimiter: string): ValidationErrors | null;
    /**
     * Year format validator
     * Only supports 1900 to 2099
     *
     * @static
     * @param {FormControl} fc
     * @returns
     * @memberof NumberValidator
     */
    static year(fc: FormControl): {
        year: boolean;
    };
    /**
     * Month format validator
     *
     * @static
     * @param {FormControl} fc
     * @returns
     * @memberof NumberValidator
     */
    static month(fc: FormControl): {
        month: boolean;
    };
    /**
     * Day format validator
     *
     * @static
     * @param {FormControl} fc
     * @returns
     * @memberof NumberValidator
     */
    static day(fc: FormControl): {
        day: boolean;
    };
    /**
     * Postalcode format validator
     *
     * @static
     * @param {FormControl} fc
     * @returns
     * @memberof NumberValidator
     */
    static postalcode(fc: FormControl): {
        postalcode: boolean;
    };
    /**
     * halfwidth format validator including - and .
     *
     * @static
     * @param {FormControl} fc
     * @returns
     * @memberof NumberValidator
     */
    static halfwidth(fc: FormControl): {
        halfwidth: boolean;
    };
    /**
     * fullwidth format validator including - and .
     *
     * @static
     * @param {FormControl} fc
     * @returns
     * @memberof NumberValidator
     */
    static fullwidth(fc: FormControl): {
        fullwidth: boolean;
    };
    /**
     * 半角数字の金額
     *
     * @static
     * @param {FormControl} control
     * @returns {*}
     * @memberof StringValidator
     */
    static money(control: FormControl): any;
    /**
     * パーセント数字(少数部2桁まで)
     *
     * @static
     * @param {FormControl} control
     * @returns {*}
     * @memberof StringValidator
     */
    static percent(control: FormControl): any;
    /**
     * 小数点以上と以下の桁数を指定する。
     * ※符号は桁数としてカウントする。（-12は3桁）
     *
     * @static
     * @param {number} integerLength
     * @param {number} decimalLength
     * @returns {*}
     * @memberof StringValidator
     */
    static decimal(integerLength: number, decimalLength: number): any;
    /**
     * Check the number can be full divied by specified radix.
     *
     * @static
     * @param {number} radix
     * @returns {ValidatorFn}
     * @memberof StringValidator
     */
    static radix(radix: number): ValidatorFn;
    /**
     * Check if the date is before the baseDate
     * baseDate format is expected to be yyyy-MM-dd format with specified separator that is set in the first parameter
     *
     * @static
     * @param {string} separator
     * @param {string} [baseDate=''] if baseDate is not filled, use system date
     * @returns {*}
     * @memberof NumberValidator
     */
    static pastDate(separator: string, baseDate?: string): any;
    /**
     * Check if the date is after the baseDate
     * baseDate format is expected to be yyyy-MM-dd format with specified separator that is set in the first parameter
     *
     * @static
     * @param {string} separator
     * @param {string} [baseDate=''] if baseDate is not filled, use system date
     * @returns {*}
     * @memberof NumberValidator
     */
    static futureDate(separator: string, baseDate?: string): any;
    /**
     * Compare 2 dates.
     * If past is ture, check if value is before the baseDate
     * If past is false, check if value is after the baseDate
     *
     * @private
     * @param {string} value
     * @param {boolean} past
     * @param {string} separator
     * @param {string} baseDate
     * @returns {{ [key: string]: any }}
     * @memberof NumberValidator
     */
    private static compareDates;
    static ɵfac: i0.ɵɵFactoryDef<NumberValidator, never>;
    static ɵprov: i0.ɵɵInjectableDef<NumberValidator>;
}
