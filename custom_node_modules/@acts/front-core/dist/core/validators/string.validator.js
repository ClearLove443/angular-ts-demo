import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Check if the value is empty
 *
 * @private
 * @param {*} value
 * @returns {boolean}
 * @memberof NumberValidator
 */
function isEmptyInputValue(value) {
    // we don't check for string here so it also works with arrays
    return value == null || value.length === 0;
}
/**
 * Common validator imported from Chat-co robot
 *
 * @export
 * @class StringValidator
 */
var StringValidator = /** @class */ (function () {
    function StringValidator() {
    }
    /**
     * Verify length
     *
     * @static
     * @param {number} maxLength
     * @returns {ValidatorFn}
     * @memberof StringValidator
     */
    StringValidator.equalLength = function (maxLength) {
        return function (control) {
            var value = (control.value || '') + '';
            if (value === '') {
                return null;
            }
            return value.length === maxLength
                ? null
                : { equalLength: { length: maxLength } };
        };
    };
    /**
     * 全角チェック（全角スペースは含めない）
     *
     * @static
     * @param {FormControl} control
     * @returns {*}
     * @memberof StringValidator
     */
    StringValidator.fullWidth = function (control) {
        if (isEmptyInputValue(control.value)) {
            return null;
        }
        var value = (control.value || '') + '';
        var rege = /^[^ -~｡-ﾟ　]*$/;
        var valid = rege.test(value);
        return valid ? null : { fullWidth: true };
    };
    /**
     * 全角チェック（全角スペース含む）
     *
     * @static
     * @param {FormControl} control
     * @returns {*}
     * @memberof StringValidator
     */
    StringValidator.fullWidthAndSpace = function (control) {
        var value = (control.value || '') + '';
        var rege = /^[^ -~｡-ﾟ]*$/;
        var valid = rege.test(value);
        return valid ? null : { fullWidthAndSpace: true };
    };
    /**
     * 全角英数
     *
     * @static
     * @param {FormControl} control
     * @returns {*}
     * @memberof StringValidator
     */
    StringValidator.fullWidthAlphabetsAndNumbers = function (control) {
        var value = (control.value || '') + '';
        var rege = /^[０-９ａ-ｚＡ-Ｚ]*$/;
        var valid = rege.test(value);
        return valid ? null : { fullWidth: true };
    };
    /**
     * 全角カナ
     *
     * @static
     * @param {FormControl} control
     * @returns {*}
     * @memberof StringValidator
     */
    StringValidator.fullWidthKana = function (control) {
        var value = (control.value || '') + '';
        var rege = /^[゠-ヿ]*$/; // Unicode\u30A0から\u30FFまで
        var valid = rege.test(value);
        return valid ? null : { fullWidthKana: true };
    };
    /**
     * 全角カナ（全角スペース含む）
     *
     * @static
     * @param {FormControl} control
     * @returns {*}
     * @memberof StringValidator
     */
    StringValidator.fullWidthKanaAndSpace = function (control) {
        var value = (control.value || '') + '';
        var rege = /^[゠-ヿ　]*$/; // Unicode\u30A0から\u30FFまでと全角スペース(\u3000)
        var valid = rege.test(value);
        return valid ? null : { fullWidthKanaAndSpace: true };
    };
    /**
     * 全角英字
     *
     * @static
     * @param {FormControl} control
     * @returns {*}
     * @memberof StringValidator
     */
    StringValidator.fullWidthAlphabets = function (control) {
        var value = (control.value || '') + '';
        var rege = /^[Ａ-Ｚ]*$/;
        var valid = rege.test(value);
        return valid ? null : { fullWidthAlphabets: true };
    };
    /**
     * 全角数字
     *
     * @static
     * @param {FormControl} control
     * @returns {*}
     * @memberof StringValidator
     */
    StringValidator.fullWidthNumbers = function (control) {
        var value = (control.value || '') + '';
        var rege = /^[０-９]*$/;
        var valid = rege.test(value);
        return valid ? null : { fullWidthNumbers: true };
    };
    /**
     * 半角英数
     *
     * @static
     * @param {FormControl} control
     * @returns {*}
     * @memberof StringValidator
     */
    StringValidator.halfWidthAlphabetsAndNumbers = function (control) {
        var value = (control.value || '') + '';
        var rege = /^[a-zA-Z0-9]*$/;
        var valid = rege.test(value);
        return valid ? null : { halfWidthAlphabetsAndNumbers: true };
    };
    /**
     * 半角英字
     *
     * @static
     * @param {FormControl} control
     * @returns {*}
     * @memberof StringValidator
     */
    StringValidator.halfWidthAlphabets = function (control) {
        if (isEmptyInputValue(control.value)) {
            return null;
        }
        var rege = /^[a-zA-Z]+$/;
        var valid = rege.test(control.value);
        return valid ? null : { halfWidthAlphabets: true };
    };
    /**
     * 半角カナ
     *
     * @static
     * @param {FormControl} control
     * @returns {*}
     * @memberof StringValidator
     */
    StringValidator.halfWidthKana = function (control) {
        if (isEmptyInputValue(control.value)) {
            return null;
        }
        // const rege = /^[\u30A0-\u30FF\uFF65-\uFF9F\uFF41-\uFF5A\uFF21-\uFF3A\uFF10-\uFF19\u0028\uFF08\u0029\uFF09\u002D\uFF0D\u002E\uFF0E\u309B\u309C]$/;
        var rege = /^[ｦ-ﾟ]+$/;
        var valid = rege.test(control.value);
        return valid ? null : { halfWidthKana: true };
    };
    /**
     * 半角英数字と記号だけ（空白文字は入力不可）入力できるバリデーション
     *
     * @static
     * @param {FormControl} control
     * @returns {*}
     * @memberof StringValidator
     */
    StringValidator.lettersAndNumbersAndSymbols = function (control) {
        if (isEmptyInputValue(control.value)) {
            return null;
        }
        var rege = /^[0-9a-zA-Z!-/:-@¥[-`{-~]*$/;
        var valid = rege.test(control.value);
        return valid ? null : { lettersAndNumbersAndSymbols: true };
    };
    /**
     * アルファベットと数字と記号が１文字以上含まれていること
     *
     * @static
     * @param {FormControl} control
     * @returns {*}
     * @memberof StringValidator
     */
    StringValidator.safetyPassword = function (control) {
        // const value = (control.value.trim() || '') + '';
        if (isEmptyInputValue(control.value)) {
            return null;
        }
        var rege = /^(?=.*?[a-z])(?=.*?\d)(?=.*?[!-\/:-@[-`{-~])[!-~]*$/i;
        var valid = rege.test(control.value);
        return valid ? null : { safetyPassword: true };
    };
    StringValidator.ɵfac = function StringValidator_Factory(t) { return new (t || StringValidator)(); };
    StringValidator.ɵprov = i0.ɵɵdefineInjectable({ token: StringValidator, factory: StringValidator.ɵfac });
    return StringValidator;
}());
export { StringValidator };
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(StringValidator, [{
        type: Injectable
    }], null, null); })();
//# sourceMappingURL=string.validator.js.map