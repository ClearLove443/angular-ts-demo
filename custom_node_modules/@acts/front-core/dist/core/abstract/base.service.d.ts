import { Observable } from 'rxjs';

import { HttpParams } from '@angular/common/http';
import { EntityStore, Store } from '@datorama/akita';

/**
 * api service methods
 *
 * @export
 * @class ApiBaseService
 */
export declare class BaseService {
    /**
     * Initialize LoadingState before communicating.
     *
     * @private
     * @param {EntityStore<any, any, any>} store
     * @memberof AddressService
     */
    protected initializeLoadingState(store: EntityStore<any, any, any> | Store<any>): void;
    /**
     * Handle http error
     *
     * @protected
     * @template T
     * @param {EntityStore<any, any, any>} store
     * @returns {(error: any) => Observable<T>}
     * @memberof BaseService
     */
    protected handleError<T>(store: EntityStore<any, any, any> | Store<any>, showDialog?: boolean, store2?: EntityStore<any, any, any> | Store<any>): (error: any) => Observable<T>;
    /**
     * Handle http error (Silent Mode)
     *
     * @protected
     * @template T
     * @param {EntityStore<any, any, any>} store
     * @returns {(error: any) => Observable<T>}
     * @memberof BaseService
     */
    protected silentHandleError<T>(store: EntityStore<any, any, any> | Store<any>): (error: any) => Observable<T>;
    /**
     * set queryParams
     *
     * @protected
     * @param {string} key
     * @param {*} value
     * @param {*} queryParams
     * @memberof BaseService
     */
    protected setQueryParam(key: string, value: any, queryParams: any): void;
    /**
     * object to HttpParams
     *
     * @protected
     * @param {Object} source
     * @returns {HttpParams}
     * @memberof BaseService
     */
    protected buildQueryParams(source: Object): HttpParams;
}
