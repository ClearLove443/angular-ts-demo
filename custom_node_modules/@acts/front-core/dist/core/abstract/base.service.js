import { HttpParams } from '@angular/common/http';
import isNil from 'lodash/isNil';
import isPlainObject from 'lodash/isPlainObject';
import { EMPTY } from 'rxjs';
import { ApiValidationError } from '../error-handler/errors';
import { CustomHttpParamsEncoder } from '../http-interceptors/custom-http-param-encoder';
import { DateUtils } from '../utils/date.util';
/**
 * api service methods
 *
 * @export
 * @class ApiBaseService
 */
var BaseService = /** @class */ (function () {
    function BaseService() {
    }
    /**
     * Initialize LoadingState before communicating.
     *
     * @private
     * @param {EntityStore<any, any, any>} store
     * @memberof AddressService
     */
    BaseService.prototype.initializeLoadingState = function (store) {
        store.setLoading(true);
        store.setError(null);
    };
    /**
     * Handle http error
     *
     * @protected
     * @template T
     * @param {EntityStore<any, any, any>} store
     * @returns {(error: any) => Observable<T>}
     * @memberof BaseService
     */
    BaseService.prototype.handleError = function (store, showDialog, stor2) {
        if (showDialog === void 0) { showDialog = false; }
        return function (error) {
            store.setError(error);
            store.setLoading(false);
            stor2.setLoading(false);
            if (error.validationError) {
                if (error.validationError.global && showDialog) {
                    var messageArray = error.validationError.global;
                    var messageStr = '';
                    for (var index = 0; index < messageArray.length; index++) {
                        messageStr = messageStr + messageArray[index].message;
                        if (index + 1 < messageArray.length) {
                            messageStr = messageStr + '<br/>';
                        }
                    }
                    throw new ApiValidationError(error.httpError, messageStr);
                }
                return EMPTY;
            }
            throw error;
        };
    };
    /**
     * Handle http error (Silent Mode)
     *
     * @protected
     * @template T
     * @param {EntityStore<any, any, any>} store
     * @returns {(error: any) => Observable<T>}
     * @memberof BaseService
     */
    BaseService.prototype.silentHandleError = function (store) {
        return function (error) {
            store.setError(error);
            store.setLoading(false);
            return;
        };
    };
    /**
     * set queryParams
     *
     * @protected
     * @param {string} key
     * @param {*} value
     * @param {*} queryParams
     * @memberof BaseService
     */
    BaseService.prototype.setQueryParam = function (key, value, queryParams) {
        if (value !== undefined) {
            if (typeof value === 'string') {
                queryParams = queryParams.set(key, value);
            }
            else if (Array.isArray(value)) {
                value.forEach(function (v) { return (queryParams = queryParams.append(key, v)); });
            }
            else {
                queryParams = queryParams.set(key, JSON.stringify(value));
            }
        }
    };
    /**
     * object to HttpParams
     *
     * @protected
     * @param {Object} source
     * @returns {HttpParams}
     * @memberof BaseService
     */
    BaseService.prototype.buildQueryParams = function (source) {
        var result = {};
        Object.keys(source).forEach(function (key) {
            var value = source[key];
            if (isNil(value)) {
                return;
            }
            if (value instanceof Date) {
                value = DateUtils.toISO8601DateString(value);
            }
            else if (isPlainObject(value)) {
                value = JSON.stringify(value);
            }
            else {
                value = value.toString();
            }
            result[key] = value;
        });
        return new HttpParams({
            encoder: new CustomHttpParamsEncoder(),
            fromObject: result
        });
    };
    return BaseService;
}());
export { BaseService };
//# sourceMappingURL=base.service.js.map