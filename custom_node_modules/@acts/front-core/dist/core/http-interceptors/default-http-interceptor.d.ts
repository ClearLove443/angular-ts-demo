import { Observable } from 'rxjs';
import { HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';
import { InjectionToken } from '@angular/core';
import { AuthQuery } from '../auth/auth.query';
import * as i0 from "@angular/core";
export declare const DEFAULT_HTTP_TIMEOUT: InjectionToken<number>;
/**
 * angular httpclient header inspect class
 *
 * @export
 * @class AuthInterceptor
 * @implements {HttpInterceptor}
 */
export declare class DefaultHttpInterceptor implements HttpInterceptor {
    protected defaultTimeout: number;
    protected auth: AuthQuery;
    protected iso8601regex: RegExp;
    /**
     * Creates an instance of DefaultHttpInterceptor.
     * @param {number} defaultTimeout
     * @param {Injector} injector
     * @memberof DefaultHttpInterceptor
     */
    constructor(defaultTimeout: number, auth: AuthQuery);
    /**
     * Intercept angular http connection
     *
     * @param {HttpRequest<any>} req
     * @param {HttpHandler} next
     * @returns {Observable<HttpEvent<any>>}
     * @memberof DefaultHttpInterceptor
     */
    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;
    /**
     * Convert body string to date
     *
     * @protected
     * @param {*} body
     * @returns {void}
     * @memberof DefaultHttpInterceptor
     */
    protected convertToDate(body: any): void;
    /**
     * is ISO8601 String
     *
     * @protected
     * @param {*} value
     * @returns {boolean}
     * @memberof DefaultHttpInterceptor
     */
    protected isIso8601(value: string): boolean;
    /**
     * switch errors
     *
     * @protected
     * @param {HttpErrorResponse} error
     * @returns {Observable<never>}
     * @memberof DefaultHttpInterceptor
     */
    protected switchError(error: HttpErrorResponse): Observable<never>;
    /**
     * create ApplicationError from error response status code
     *
     * @private
     * @param {HttpErrorResponse} error
     * @returns {ApplicationError}
     * @memberof DefaultHttpInterceptor
     */
    private createApplicationError;
    static ɵfac: i0.ɵɵFactoryDef<DefaultHttpInterceptor, never>;
    static ɵprov: i0.ɵɵInjectableDef<DefaultHttpInterceptor>;
}
