var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { CustomError } from 'ts-custom-error';
/**
 * Application Default Error
 *
 * @export
 * @class ApplicationError
 * @implements {Error}
 */
var ApplicationError = /** @class */ (function (_super) {
    __extends(ApplicationError, _super);
    /**
     *Creates an instance of ApplicationError.
     * @param {string} [message]
     * @param {string} [businessMessage]
     * @param {string} [businessMessageTitle]
     * @param {() => Promise<void>} [errorHandlerAfterCallback]
     * @memberof ApplicationError
     */
    function ApplicationError(message, businessMessage, businessMessageTitle, errorHandlerAfterCallback, skipWhileStackDialog) {
        if (skipWhileStackDialog === void 0) { skipWhileStackDialog = false; }
        var _this = _super.call(this, message) || this;
        /**
         * for Error dialog message
         *
         * @type {string}
         * @memberof ApplicationError
         */
        _this.businessMessage = null;
        /**
         * for Error dialog title
         *
         * @type {string}
         * @memberof ApplicationError
         */
        _this.businessMessageTitle = null;
        /**
         * error code
         *
         * @type {number}
         * @memberof ApplicationError
         */
        // tslint:disable-next-line: typedef
        _this.code = 0;
        /**
         * error handler after callback
         *
         * @private
         * @memberof ApplicationError
         */
        _this.errorHandlerAfterCallback = undefined;
        /**
         * When the dialog is displayed, skip showing the dialog in duplicate.
         *
         * @type {false}
         * @memberof ApplicationError
         */
        _this.skipWhileStackDialog = false;
        _this.businessMessage = businessMessage;
        _this.businessMessageTitle = businessMessageTitle;
        _this.errorHandlerAfterCallback = errorHandlerAfterCallback;
        _this.skipWhileStackDialog = skipWhileStackDialog;
        return _this;
    }
    /**
     * Returns a string that represents the current object.
     *
     * @returns A string that represents the current object.
     * @memberof ApplicationError
     */
    ApplicationError.prototype.toString = function () {
        return this.name + ': ' + this.message;
    };
    return ApplicationError;
}(CustomError));
export { ApplicationError };
/**
 * Application Network Error
 *
 * @export
 * @class NetworkError
 * @extends {ApplicationError}
 */
var NetworkError = /** @class */ (function (_super) {
    __extends(NetworkError, _super);
    /**
     *Creates an instance of NetworkError.
     * @param {HttpErrorResponse} httpError
     * @param {string} [businessMessage]
     * @param {string} [businessMessageTitle]
     * @param {() => Promise<void>} [errorHandlerAfterCallback]
     * @memberof NetworkError
     */
    function NetworkError(httpError, businessMessage, businessMessageTitle, errorHandlerAfterCallback, skipWhileStackDialog) {
        if (skipWhileStackDialog === void 0) { skipWhileStackDialog = false; }
        var _this = _super.call(this, httpError.message, businessMessage, businessMessageTitle, errorHandlerAfterCallback, skipWhileStackDialog) || this;
        _this.httpError = httpError;
        _this.code = httpError.status;
        return _this;
    }
    return NetworkError;
}(ApplicationError));
export { NetworkError };
/**
 * Maintenance error
 *
 * @export
 * @class MaintenanceError
 * @extends {ApplicationError}
 */
var MaintenanceError = /** @class */ (function (_super) {
    __extends(MaintenanceError, _super);
    function MaintenanceError() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MaintenanceError;
}(NetworkError));
export { MaintenanceError };
/**
 * Application Authentication Error
 *
 * @export
 * @class AuthenticationError
 * @extends {ApplicationError}
 */
// tslint:disable-next-line:max-classes-per-file
var AuthenticationError = /** @class */ (function (_super) {
    __extends(AuthenticationError, _super);
    function AuthenticationError() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return AuthenticationError;
}(NetworkError));
export { AuthenticationError };
/**
 * Application API Error
 *
 * @export
 * @class NetworkError
 * @extends {ApplicationError}
 */
// tslint:disable-next-line:max-classes-per-file
var ApiValidationError = /** @class */ (function (_super) {
    __extends(ApiValidationError, _super);
    /**
     *Creates an instance of ApiValidationError.
     * @param {HttpErrorResponse} httpError
     * @param {string} [businessMessage]
     * @param {string} [businessMessageTitle]
     * @param {() => Promise<void>} [errorHandlerAfterCallback]
     * @memberof ApiValidationError
     */
    function ApiValidationError(httpError, businessMessage, businessMessageTitle, errorHandlerAfterCallback, skipWhileStackDialog) {
        if (skipWhileStackDialog === void 0) { skipWhileStackDialog = false; }
        var _this = _super.call(this, httpError.message, businessMessage, businessMessageTitle, errorHandlerAfterCallback, skipWhileStackDialog) || this;
        _this.httpError = httpError;
        // for ApiValidationError
        _this.validationError = httpError.error;
        _this.code = httpError.status;
        return _this;
    }
    return ApiValidationError;
}(ApplicationError));
export { ApiValidationError };
/**
 * Application API Error
 *
 * @export
 * @class NetworkError
 * @extends {ApplicationError}
 */
// tslint:disable-next-line:max-classes-per-file
var ApiSystemError = /** @class */ (function (_super) {
    __extends(ApiSystemError, _super);
    function ApiSystemError() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ApiSystemError;
}(NetworkError));
export { ApiSystemError };
//# sourceMappingURL=errors.js.map