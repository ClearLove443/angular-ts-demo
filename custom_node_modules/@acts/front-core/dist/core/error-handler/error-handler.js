/**
 * Core exception handler
 */
import { HttpErrorResponse } from '@angular/common/http';
import * as i0 from "@angular/core";
import { Injectable, Injector } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { AuthService } from '../auth/auth.service';
import { LoggerService } from '../logger/logger.service';
/**
 * Core exception handler
 *
 * @export
 * @class GlobalErrorHandler
 * @implements {ErrorHandler}
 */
var GlobalErrorHandler = /** @class */ (function () {
    /**
     * Creates an instance of GlobalErrorHandler.
     *
     * @param {Injector} injector Injector
     * @memberof GlobalErrorHandler
     */
    function GlobalErrorHandler(injector) {
        this.injector = injector;
    }
    /**
     * Exception handler
     *
     * @param {*} error error object
     * @memberof GlobalErrorHandler
     */
    GlobalErrorHandler.prototype.handleError = function (error) {
        // Gets each instance using injector
        var loggerService = this.injector.get(LoggerService);
        var translate = this.injector.get(TranslateService);
        // Promise rejection
        if (error.promise && error.rejection && error.rejection instanceof Error) {
            error = error.rejection;
        }
        // Create logger message
        var message = error.message ? error.message : error.toString();
        var businessMessage = null;
        var businessMessageTitle = null;
        console.error(error);
        // Override dialog messages
        if (error.businessMessage) {
            businessMessage = error.businessMessage;
            businessMessageTitle = error.businessMessageTitle;
        }
        // NetworkError
        if (error.name && error.name === 'NetworkError' && !businessMessage) {
            businessMessage = translate.instant('SystemMessages.SystemErrorNetwork');
        }
        // NetworkError (API Not Found)
        if (error.name && error.name === 'HttpErrorResponse' && !businessMessage) {
            businessMessage = translate.instant('SystemMessages.SystemErrorNetwork');
        }
        // ApiSystemError
        if (error.name && error.name === 'ApiSystemError' && !businessMessage) {
            businessMessage = translate.instant('SystemMessages.SystemErrorApi');
        }
        // AuthenticationError
        if (error.name && error.name === 'AuthenticationError') {
            if (!businessMessage) {
                businessMessage = translate.instant('SystemMessages.SystemErrorAuth');
            }
            var authService = this.injector.get(AuthService);
            authService.logout();
        }
        // Maintenance
        if (error.name && error.name === 'MaintenanceError' && !businessMessage) {
            businessMessage = translate.instant('SystemMessages.SystemErrorMaintenance');
        }
        loggerService.systemError({
            message: (businessMessage ? businessMessage : '') + message,
            error: error instanceof HttpErrorResponse ? null : error
        });
        // Other system error
        if (!businessMessage) {
            businessMessage = translate.instant('SystemMessages.SystemErrorFatal');
        }
        if (!!error && error.status !== 400) {
            this.showSystemErrorDialog(businessMessageTitle
                ? businessMessageTitle
                : translate.instant('SystemMessages.SystemErrorTitle'), businessMessage ? businessMessage : message, translate.instant('Button.CLOSE'), error);
        }
    };
    GlobalErrorHandler.ɵfac = function GlobalErrorHandler_Factory(t) { return new (t || GlobalErrorHandler)(i0.ɵɵinject(i0.Injector)); };
    GlobalErrorHandler.ɵprov = i0.ɵɵdefineInjectable({ token: GlobalErrorHandler, factory: GlobalErrorHandler.ɵfac });
    return GlobalErrorHandler;
}());
export { GlobalErrorHandler };
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(GlobalErrorHandler, [{
        type: Injectable
    }], function () { return [{ type: i0.Injector }]; }, null); })();
//# sourceMappingURL=error-handler.js.map