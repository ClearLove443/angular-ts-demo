var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import * as jsyaml from 'js-yaml';
import * as _ from 'lodash';
import { forkJoin } from 'rxjs';
import { map } from 'rxjs/operators';
/**
 * Define translate loader for multiple files using http.
 *
 * @export
 * @class TranslateYamlLoader
 * @implements {TranslateLoader}
 */
var TranslateYamlLoader = /** @class */ (function () {
    /**
     * Creates an instance of TranslateYamlLoader.
     * @param {HttpClient} http HTTP module
     * @param {string} [directory='assets/i18n/'] yaml dir
     * @param {string[]} [prefixes=['label', 'message', 'code']] the directory for language file
     * @param {string} [suffix='.yaml'] the extension of language file
     * @memberof TranslateYamlLoader
     */
    function TranslateYamlLoader(http, directory, prefixes, suffix) {
        if (directory === void 0) { directory = 'assets/i18n/'; }
        if (prefixes === void 0) { prefixes = ['label.', 'message.', 'code.']; }
        if (suffix === void 0) { suffix = '.yaml'; }
        this.http = http;
        this.directory = directory;
        this.prefixes = prefixes;
        this.suffix = suffix;
    }
    /**
     * Gets the translations from the server
     *
     * @param {string} lang language
     * @returns {*} translate data (Observable<any>)
     * @memberof TranslateYamlLoader
     */
    TranslateYamlLoader.prototype.getTranslation = function (lang) {
        var _this = this;
        var e = this.prefixes.map(function (prefix) {
            return _this.http
                .get("" + _this.directory + prefix + lang + _this.suffix, {
                responseType: 'text'
            })
                .pipe(map(function (res) {
                var yaml = jsyaml.safeLoadAll(res.toString());
                return yaml ? yaml[0] : yaml;
            }));
        });
        var translateData = {};
        return forkJoin(e).pipe(map(function (res) {
            _.merge.apply(_, __spreadArrays([translateData], res));
            return translateData;
        }));
    };
    return TranslateYamlLoader;
}());
export { TranslateYamlLoader };
//# sourceMappingURL=translate-yaml-loader.js.map